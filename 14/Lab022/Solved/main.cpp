//Реализовать консольное приложение, включающее два класса, базовый и потомок.
//В базовом классе объявить простую и виртуальную функцию, в производном их перегрузить.
//Содержание функций - вывод на экран сообщения вида "простая/виртуальная функция базового/производного класса".
//
//Описать 4 указателя:
//-указатель на базовый класс, которому присвоен объект базового класса;
//-указатель на производный класс, которому присвоен объект производного класса;
//-указатель на базовый класс, которому присвоен объект из второго указателя;
//-указатель на производный класс, которому с использованием статической операции приведения типа присвоен объект из третьего указателя.
//
//С помощью каждого из указателей вызвать обе функции, после чего на защите работы объяснить результат.

#include <iostream>
/*РОДИТЕЛЬ*/
using namespace std;

class baseOberemokA
{
public:
	void SShow() { cout << "Base no Virtual" << endl; } //Не виртуальный Метод класса, выводящий на экран base
	virtual void Show() { cout << "Base Virtual" << endl; } //Виртуальный Метод класса, выводящий на экран base
};

/*ПОТОМОК КЛАССА BASE*/
class delivedOberemokA :public baseOberemokA
{
public:
	void SShow() { cout << "Delived no Virtual" << endl; } //Не виртуальный Метод класса, выводящий на экран delived
	void Show() { cout << "Delived Virtual" << endl; } //Виртуальный Метод класса, выводящий на экран delived
};

void main()
{
	system("CLS");

   //Описать 4 указателя:
	baseOberemokA base1;
	delivedOberemokA del;
	//указатель на базовый класс, которому присвоен объект базового класса;
	baseOberemokA *p1_base1;
	p1_base1 = &base1;
	//-указатель на производный класс, которому присвоен объект производного класса;
	delivedOberemokA *p2_del;
	p2_del = &del;
	//-указатель на базовый класс, которому присвоен объект из второго указателя;
	baseOberemokA *p3_base;
	p3_base = p2_del;
    //-указатель на производный класс, которому с использованием статической операции приведения типа присвоен объект из третьего указателя.
	delivedOberemokA *p4_del;
	p4_del = static_cast<delivedOberemokA*>(p3_base);

	cout << "**********************Calls no virtual***********************" << endl;
	p1_base1->SShow();
	cout << "**********************Calls virtual**************************" << endl;
	p1_base1->Show();
	cout << "**********************Calls no virtual***********************" << endl;
	p2_del->SShow();
	cout << "**********************Calls virtual**************************" << endl;
	p2_del->Show();
	cout << "**********************Calls no virtual***********************" << endl;
	p3_base->SShow();
	cout << "**********************Calls virtual**************************" << endl;
	p3_base->Show();
	cout << "**********************Calls no virtual***********************" << endl;
	p4_del->SShow();
	cout << "**********************Calls virtual**************************" << endl;
	p4_del->Show();



	cin.get();
}